geom_sf(data=Pittsburgh_MSA, fill=NA, colour="black", size=1.5) +
labs(title= "Development Demand in 2021: Predicted Probabilities") +
mapTheme()
quantile(dat_infill$predict_2021.infill)
testSetProbs <-
data.frame(class = datTest$lc_change,
probs = predict(Model6, datTest, type="response"))
ggplot(testSetProbs, aes(probs)) +
geom_density(aes(fill=class), alpha=0.5) +
scale_fill_manual(values = palette2,
labels=c("No Change","New Development")) +
labs(title = "Histogram of test set predicted probabilities",
x="Predicted Probabilities",y="Density") +
plotTheme()
# zoom closer
ggplot(testSetProbs, aes(probs)) +
geom_density(aes(fill=class), alpha=0.5) +
xlim(0, 0.3)+
scale_fill_manual(values = palette2,
labels=c("No Change","New Development")) +
labs(title = "Histogram of test set predicted probabilities",
x="Predicted Probabilities",y="Density") +
plotTheme()
modelList <- paste0("Model", 1:6)
map_dfc(modelList, function(x)pR2(get(x)))[4,] %>%
setNames(paste0("Model",1:6)) %>%
gather(Model,McFadden) %>%
ggplot(aes(Model,McFadden)) +
geom_bar(stat="identity") +
labs(title= "McFadden R-Squared by Model") +
plotTheme()
options(yardstick.event_first = FALSE)
testSetProbs <-
testSetProbs %>%
mutate(predClass_05 = as.factor(ifelse(testSetProbs$probs >= 0.05 ,1,0)),
predClass_17 = as.factor(ifelse(testSetProbs$probs >= 0.17 ,1,0)))
testSetProbs %>%
dplyr::select(-probs) %>%
gather(Variable, Value, -class) %>%
group_by(Variable) %>%
summarize(Sensitivity = round(yardstick::sens_vec(class,factor(Value)),2),
Specificity = round(yardstick::spec_vec(class,factor(Value)),2),
Accuracy = round(yardstick::accuracy_vec(class,factor(Value)),2)) %>%
formattable(table,
align=c("l","l"))
pred<-prediction(testProbs[is.na(testProbs$pred)==FALSE,]$pred,testProbs[is.na(testProbs$pred)==FALSE,]$obs)
library(ROCR)
pred<-prediction(testProbs[is.na(testProbs$pred)==FALSE,]$pred,testProbs[is.na(testProbs$pred)==FALSE,]$obs)
pred<-prediction(testSetProbs[is.na(testSetProbs$probs)==FALSE,]$pred,testSetProbs[is.na(testSetProbs$probs)==FALSE,]$obs)
classProbs <- predict (Model6, dat, type='response')
testProbs <- data.frame (obs = as.numeric(dat$develop),pred = classProbs)
classProbs <- predict (Model6, datTest, type='response')
testProbs <- data.frame (obs = as.numeric(datTest$develop),pred = classProbs)
View(datTest)
testProbs <- data.frame (obs = as.numeric(datTest$developed11), pred = classProbs)
pred <- prediction(testProbs[is.na(testProbs$pred)==FALSE,]$pred,testProbs[is.na(testProbs$pred)==FALSE,]$obs)
f.perf<-performance(pred,"f")
plot(f.perf)
F.score <-c(f.perf@y.values[[1]])
cutoff<-c(f.perf@x.values[[1]])
F.score_table<-data.frame(cbind(F.score,cutoff))
F.score_table[which.max(F.score_table$F.score),]
F.score
cutoff
F.score_table
F.score_table[which.max(F.score_table$F.score),]
View(F.score_table)
F.score_table[which.max(F.score_table$F.score),]
plot(f.perf)
testSetProbs <-
testSetProbs %>%
mutate(predClass_01 = as.factor(ifelse(testSetProbs$probs >= 0.01 ,1,0)),
predClass_0149 = as.factor(ifelse(testSetProbs$probs >= 0.0149 ,1,0)),
predClass_012 = as.factor(ifelse(testSetProbs$probs >= 0.012 ,1,0)))
testSetProbs %>%
dplyr::select(-probs) %>%
gather(Variable, Value, -class) %>%
group_by(Variable) %>%
summarize(Sensitivity = round(yardstick::sens_vec(class,factor(Value)),2),
Specificity = round(yardstick::spec_vec(class,factor(Value)),2),
Accuracy = round(yardstick::accuracy_vec(class,factor(Value)),2)) %>%
formattable(table,
align=c("l","l"))
predsForMap <-
dat %>%
mutate(probs = predict(Model6, dat, type="response") ,
Threshold_5_Pct = as.factor(ifelse(probs >= 0.0149 ,1,0)),
Threshold_17_Pct =  as.factor(ifelse(probs >= 0.17 ,1,0))) %>%
dplyr::select(lc_change,Threshold_5_Pct,Threshold_17_Pct) %>%
gather(Variable,Value, -geometry) %>%
st_cast("POLYGON")
ggplot() +
geom_point(data=predsForMap, aes(x=xyC(predsForMap)[,1], y=xyC(predsForMap)[,2], colour=Value)) +
facet_wrap(~Variable) +
scale_colour_manual(values = palette2, labels=c("No Change","New Development"),
name="") +
labs(title="Development predictions - Low threshold") +
mapTheme()
predsForMap <-
dat %>%
mutate(probs = predict(Model6, dat, type="response") ,
Threshold_1.49_Pct = as.factor(ifelse(probs >= 0.0149 ,1,0)),
Threshold_17_Pct =  as.factor(ifelse(probs >= 0.17, 1,0))) %>%
dplyr::select(lc_change,Threshold_5_Pct,Threshold_17_Pct) %>%
gather(Variable,Value, -geometry) %>%
st_cast("POLYGON")
predsForMap <-
dat %>%
mutate(probs = predict(Model6, dat, type="response") ,
Threshold_1.49_Pct = as.factor(ifelse(probs >= 0.0149 ,1,0)),
Threshold_17_Pct =  as.factor(ifelse(probs >= 0.17, 1,0))) %>%
dplyr::select(lc_change,Threshold_1.49_Pct,Threshold_17_Pct) %>%
gather(Variable,Value, -geometry) %>%
st_cast("POLYGON")
ggplot() +
geom_point(data=predsForMap, aes(x=xyC(predsForMap)[,1], y=xyC(predsForMap)[,2], colour=Value)) +
facet_wrap(~Variable) +
scale_colour_manual(values = palette2, labels=c("No Change","New Development"),
name="") +
labs(title="Development predictions - Low threshold") +
mapTheme()
set.seed(3456)
trainIndex <-
createDataPartition(dat$developed_2001, p = .50,
list = FALSE,
times = 1)
datTrain <- dat[ trainIndex,]
datTest  <- dat[-trainIndex,]
Model1 <- glm(lc_change ~ wetlands_2001 + forest_2001 + farm_2001 + otherUndeveloped_2001,
family="binomial"(link="logit"), data = datTrain)
Model2 <- glm(lc_change ~ wetlands_2001 + forest_2001  + farm_2001 + otherUndeveloped_2001 + lagDevelopment,
family="binomial"(link="logit"), data = datTrain)
Model3 <- glm(lc_change ~ wetlands_2001 + forest_2001  + farm_2001 + otherUndeveloped_2001 + lagDevelopment + pop_2000,
family="binomial"(link="logit"), data = datTrain)
Model4 <- glm(lc_change ~ wetlands_2001 + forest_2001  + farm_2001 + otherUndeveloped_2001 + lagDevelopment + pop_2000 +
pop_2010,
family="binomial"(link="logit"), data = datTrain)
Model5 <- glm(lc_change ~ wetlands_2001 + forest_2001  + farm_2001 + otherUndeveloped_2001 + lagDevelopment + pop_Change,
family="binomial"(link="logit"), data = datTrain)
Model6 <- glm(lc_change ~ wetlands_2001 + forest_2001  + farm_2001 + otherUndeveloped_2001 + lagDevelopment + pop_Change +
distance_highways,
family="binomial"(link="logit"), data = datTrain)
options(yardstick.event_first = FALSE)
classProbs <- predict (Model6, datTest, type='response')
testProbs <- data.frame (obs = as.numeric(datTest$developed11), pred = classProbs)
pred <- prediction(testProbs[is.na(testProbs$pred)==FALSE,]$pred,testProbs[is.na(testProbs$pred)==FALSE,]$obs)
f.perf<-performance(pred,"f")
plot(f.perf)
F.score <-c(f.perf@y.values[[1]])
cutoff<-c(f.perf@x.values[[1]])
F.score_table<-data.frame(cbind(F.score,cutoff))
F.score_table[which.max(F.score_table$F.score),] #0.0149
testSetProbs <-
testSetProbs %>%
mutate(predClass_01 = as.factor(ifelse(testSetProbs$probs >= 0.01 ,1,0)),
predClass_0149 = as.factor(ifelse(testSetProbs$probs >= 0.0149 ,1,0)),
predClass_012 = as.factor(ifelse(testSetProbs$probs >= 0.012 ,1,0)))
testSetProbs %>%
dplyr::select(-probs) %>%
gather(Variable, Value, -class) %>%
group_by(Variable) %>%
summarize(Sensitivity = round(yardstick::sens_vec(class,factor(Value)),2),
Specificity = round(yardstick::spec_vec(class,factor(Value)),2),
Accuracy = round(yardstick::accuracy_vec(class,factor(Value)),2)) %>%
formattable(table,
align=c("l","l"))
testSetProbs %>%
dplyr::select(-probs) %>%
gather(Variable, Value, -class) %>%
group_by(Variable) %>%
summarize(Sensitivity = round(yardstick::sens_vec(class,factor(Value)),2),
Specificity = round(yardstick::spec_vec(class,factor(Value)),2),
Accuracy = round(yardstick::accuracy_vec(class,factor(Value)),2)) %>%
formattable(table,
align=c("l","l"))
testSetProbs <-
data.frame(class = datTest$lc_change,
probs = predict(Model6, datTest, type="response"))
ggplot(testSetProbs, aes(probs)) +
geom_density(aes(fill=class), alpha=0.5) +
scale_fill_manual(values = palette2,
labels=c("No Change","New Development")) +
labs(title = "Histogram of test set predicted probabilities",
x="Predicted Probabilities",y="Density") +
plotTheme()
# zoom closer
ggplot(testSetProbs, aes(probs)) +
geom_density(aes(fill=class), alpha=0.5) +
xlim(0, 0.3)+
scale_fill_manual(values = palette2,
labels=c("No Change","New Development")) +
labs(title = "Histogram of test set predicted probabilities",
x="Predicted Probabilities",y="Density") +
plotTheme()
options(yardstick.event_first = FALSE)
classProbs <- predict (Model6, datTest, type='response')
testProbs <- data.frame (obs = as.numeric(datTest$developed11), pred = classProbs)
pred <- prediction(testProbs[is.na(testProbs$pred)==FALSE,]$pred,testProbs[is.na(testProbs$pred)==FALSE,]$obs)
f.perf<-performance(pred,"f")
plot(f.perf)
F.score <-c(f.perf@y.values[[1]])
cutoff<-c(f.perf@x.values[[1]])
F.score_table<-data.frame(cbind(F.score,cutoff))
F.score_table[which.max(F.score_table$F.score),] #0.0149
testSetProbs <-
testSetProbs %>%
mutate(predClass_01 = as.factor(ifelse(testSetProbs$probs >= 0.01 ,1,0)),
predClass_0149 = as.factor(ifelse(testSetProbs$probs >= 0.0149 ,1,0)),
predClass_012 = as.factor(ifelse(testSetProbs$probs >= 0.012 ,1,0)))
testSetProbs %>%
dplyr::select(-probs) %>%
gather(Variable, Value, -class) %>%
group_by(Variable) %>%
summarize(Sensitivity = round(yardstick::sens_vec(class,factor(Value)),2),
Specificity = round(yardstick::spec_vec(class,factor(Value)),2),
Accuracy = round(yardstick::accuracy_vec(class,factor(Value)),2)) %>%
formattable(table,
align=c("l","l"))
testSetProbs %>%
dplyr::select(-probs) %>%
gather(Variable, Value, -class) %>%
group_by(Variable) %>%
summarize(Sensitivity = round(yardstick::sens_vec(class,factor(Value)),2),
Specificity = round(yardstick::spec_vec(class,factor(Value)),2),
Accuracy = round(yardstick::accuracy_vec(class,factor(Value)),2)) %>%
formattable(table,
align=c("l","l"))
ggplot()+
geom_sf(data=MSA_fishnet) +
labs(title="Pittsburgh MSA Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA)+
mapTheme()
ggplot()+
geom_sf(data=MSA_fishnet) +
labs(title="Pittsburgh MSA Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA，fill=NA, colour="black", size=1.5)+
ggplot()+
geom_sf(data=MSA_fishnet) +
labs(title="Pittsburgh MSA Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA，fill=NA, colour="black", size=1.5)+
ggplot()+
geom_sf(data=MSA_fishnet) +
labs(title="Pittsburgh MSA Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, fill=NA, colour="black", size=1.5)+
mapTheme()
ggplot()+
geom_sf(data=MSA_fishnet) +
labs(title="Pittsburgh MSA Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, fill=NA, size=1.5)+
mapTheme()
ggplot()+
geom_sf(data=MSA_fishnet) +
labs(title="Pittsburgh MSA Fishnet, 3000 foot resolution",
subtitle="Pittsburgh MSA Counties")+
geom_sf(data=Pittsburgh_MSA, fill=NA, size=1.5)+
mapTheme()
View(Pittsburgh_MSA)
ggplot()+
geom_sf(data=MSA_fishnet) +
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, fill=name)+
mapTheme()
ggplot()+
geom_sf(data=MSA_fishnet) +
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, fill=Pittsburgh_MSA$name)+
mapTheme()
ggplot()+
geom_sf(data=MSA_fishnet) +
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, fill=factor(Pittsburgh_MSA$name))+
mapTheme()
ggplot()+
geom_sf(data=MSA_fishnet) +
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, fill=factor(NAME))+
mapTheme()
ggplot()+
geom_sf(data=MSA_fishnet) +
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, fill=factor(Pittsburgh_MSA$NAME))+
mapTheme()
ggplot()+
geom_sf(data=MSA_fishnet) +
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, aes(fill=as.factor(NAME)))+
scale_fill_viridis(discrete = T)
ggplot()+
geom_sf(data=MSA_fishnet) +
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, aes(fill=as.factor(NAME)))+
scale_fill_viridis(discrete = T)+
mapTheme()
ggplot()+
geom_sf(data=MSA_fishnet) +
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, aes(fill=as.factor(NAME)))+
scale_fill_viridis(discrete = T,
name ="County")+
mapTheme()
ggplot()+
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, aes(fill=as.factor(NAME)))+
scale_fill_viridis(discrete = T,
name ="County")+
geom_sf(data=MSA_fishnet) +
mapTheme()
ggplot()+
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, aes(fill=as.factor(NAME)))+
scale_fill_viridis(discrete = T,
name ="County")+
geom_sf(data=MSA_fishnet, fill=NA) +
mapTheme()
ggplot()+
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, aes(fill=as.factor(NAME)))+
scale_fill_viridis(discrete = T,
name ="County")+
geom_sf(data=MSA_fishnet, fill=NA, color="gray") +
mapTheme()
ggplot()+
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, aes(fill=as.factor(NAME)))+
scale_fill_viridis(discrete = T,
name ="County")+
geom_sf(data=MSA_fishnet, fill=NA, color="gray", alpha=0.5) +
mapTheme()
ggplot()+
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, aes(fill=as.factor(NAME), colour=as.factor(NAME)))+
scale_fill_viridis(discrete = T,
name ="County")+
scale_color_viridis(discrete = T,
name ="County")+
geom_sf(data=MSA_fishnet, fill=NA, color="gray", alpha=0.5) +
mapTheme()
ggplot()+
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, aes(fill=as.factor(NAME), colour=as.factor(NAME), size=1.5))+
scale_fill_viridis(discrete = T,
name ="County")+
scale_color_viridis(discrete = T,
name ="County")+
geom_sf(data=MSA_fishnet, fill=NA, color="gray", alpha=0.5) +
mapTheme()
ggplot()+
labs(title="Pittsburgh MSA Boundary and Counties",
geom_sf(data=MSA_fishnet, fill=NA, color="gray", alpha=0.5) +
subtitle="Illustration of Fishnet, 3000 foot resolution")+
ggplot()+
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=MSA_fishnet, fill=NA, color="gray", alpha=0.5) +
geom_sf(data=Pittsburgh_MSA, aes(colour=as.factor(NAME), size=1.5))+
scale_color_viridis(discrete = T,
name ="County")+
mapTheme()
ggplot()+
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=MSA_fishnet, fill=NA, color="gray", alpha=0.5) +
geom_sf(data=Pittsburgh_MSA, aes(fill=NA, colour=as.factor(NAME), size=1.5))+
scale_color_viridis(discrete = T,
name ="County")+
mapTheme()
ggplot()+
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=MSA_fishnet, fill=NA, color="gray", alpha=0.5) +
geom_sf(data=Pittsburgh_MSA, fill=NA, aes(colour=as.factor(NAME), size=1.5))+
scale_color_viridis(discrete = T,
name ="County")+
mapTheme()
ggplot()+
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=MSA_fishnet, fill=NA, color="gray", alpha=0.5) +
geom_sf(data=Pittsburgh_MSA, fill=NA, size=1.5, aes(colour=as.factor(NAME)))+
scale_color_viridis(discrete = T,
name ="County")+
mapTheme()
View(MSA_fishnet)
ggplot()+
labs(title="Pittsburgh MSA Boundary and Counties",
subtitle="Illustration of Fishnet, 3000 foot resolution")+
geom_sf(data=Pittsburgh_MSA, aes(fill=as.factor(NAME)))+
geom_sf(data=MSA_fishnet, fill=NA, color="gray", alpha=0.5) +
geom_sf(data=Pittsburgh_MSA, fill=NA, size=1.5, aes(colour=as.factor(NAME)))+
scale_color_viridis(discrete = T,
name ="County")+
scale_fill_viridis(discrete = T,
name ="County")+
mapTheme()
lc_change <- (lc_2001 != lc_2011) * lc_2011
ggplot() +
geom_sf(data=Pittsburgh_MSA_boundary)+
geom_raster(data=rast(lc_change) %>% na.omit %>% filter(value > 0),
aes(x,y,fill=as.factor(round(value,0)))) +
scale_fill_viridis(discrete=TRUE, direction=-1,name ="Land Cover Change") +
labs(title = "Pittsburgh MSA Land Cover Change, 2001-2011") +
mapTheme()
reclassMatrix <-
matrix(c(
0,12,0,
12,24,1,
24,Inf,0),
ncol=3, byrow=T)
lc_change_reclass <- reclassify(lc_change, reclassMatrix)
lc_change_reclass[lc_change_reclass < 1] <- 0
names(lc_change_reclass) <- "lc_change_reclass"
lc_change_extract <- data.frame(exact_extract(lc_change_reclass, MSA_fishnet, fun = "mode"))
names(lc_change_extract) <- "developed_2011"
MSA_fishnet <- cbind(data.frame(MSA_fishnet),lc_change_extract)
# Xinyi's
# MSA_fishnet <-
#   MSA_fishnet %>%
#   st_as_sf(.) %>%
#   st_transform(102741)
MSA_fishnet <-
MSA_fishnet %>%
st_as_sf(.) %>%
st_transform("ESRI:102741")
ggplot() +
geom_sf(data=Pittsburgh_MSA_boundary)+
geom_raster(data=rast(lc_change) %>% na.omit %>% filter(value > 0),
aes(x,y,fill=as.factor(round(value,0)))) +
scale_fill_viridis(discrete=TRUE, direction=-1,name ="Land Cover Change") +
labs(title = "Pittsburgh MSA Land Cover Change, 2001-2011") +
mapTheme()
ggplot() +
geom_sf(data=MSA_fishnet,aes(fill=as.factor(developed_2011)),color='transparent')+
scale_fill_viridis(discrete=TRUE, name ="Land Cover\nChange",labels=c("No Change","New Development")) +
labs(title="Pittsburgh MSA Development Land Use Change (2001 - 2011)") +
mapTheme()
ggplot() +
geom_sf(data=Pittsburgh_MSA_boundary) +
geom_raster(data=rast(lc_2001) %>% na.omit %>% filter(value > 0),
aes(x,y,fill=as.factor(round(value,0)))) +
scale_fill_viridis(discrete=TRUE,direction=-1, name ="") +
labs(title = "Pittsburgh MSA Land Cover, 2001") +
mapTheme()
developed <- lc_2001 == 21 | lc_2001 == 22 | lc_2001 == 23 | lc_2001 == 24
forest <- lc_2001 == 41 | lc_2001 == 42 | lc_2001 == 43
farm <- lc_2001 == 81 | lc_2001 == 82
wetlands_2001 <- lc_2001 == 90 | lc_2001 == 95
otherUndeveloped <- lc_2001 == 52 | lc_2001 == 71 | lc_2001 == 31
water <- lc_2001 == 11
names(developed) <- "developed"
names(forest) <- "forest"
names(farm) <- "farm"
names(wetlands) <- "wetlands"
names(otherUndeveloped) <- "otherUndeveloped"
names(water) <- "water"
layer_list <- list(developed, wetlands, forest, farm, otherUndeveloped, water)
names(layer_list) <- c("developed_2001", "wetlands_2001", "forest_2001",
"farm_2001", "otherUndeveloped_2001", "water_2001")
fish_extract <- function(fishnet, layers) {
extract_list <- exact_extract(layers, fishnet, fun = "mode")
return(extract_list)
}
lc_2001_extracts <- lapply(layer_list, fish_extract, fishnet = MSA_fishnet)
lc_2001_extracts <- data.frame(do.call(cbind, args = lc_2001_extracts))
MSA_fishnet <- cbind(data.frame(MSA_fishnet), lc_2001_extracts)
# Xinyi's
# MSA_fishnet <-
#   MSA_fishnet %>%
#   st_as_sf(.) %>%
#   st_transform(102741)
MSA_fishnet <-
MSA_fishnet %>%
st_as_sf(.) %>%
st_transform("ESRI:102741")
lc_2001_lcvar <-
MSA_fishnet %>%
gather(var,value,developed_2001:water_2001) %>%
dplyr::select(var,value,geometry)
lc_2001_lcvar$var <- as.factor(str_sub(lc_2001_lcvar$var,1,-6))
developed <- lc_2001 == 21 | lc_2001 == 22 | lc_2001 == 23 | lc_2001 == 24
forest <- lc_2001 == 41 | lc_2001 == 42 | lc_2001 == 43
farm <- lc_2001 == 81 | lc_2001 == 82
wetlands <- lc_2001 == 90 | lc_2001 == 95
otherUndeveloped <- lc_2001 == 52 | lc_2001 == 71 | lc_2001 == 31
water <- lc_2001 == 11
names(developed) <- "developed"
names(forest) <- "forest"
names(farm) <- "farm"
names(wetlands) <- "wetlands"
names(otherUndeveloped) <- "otherUndeveloped"
names(water) <- "water"
layer_list <- list(developed, wetlands, forest, farm, otherUndeveloped, water)
names(layer_list) <- c("developed_2001", "wetlands_2001", "forest_2001",
"farm_2001", "otherUndeveloped_2001", "water_2001")
fish_extract <- function(fishnet, layers) {
extract_list <- exact_extract(layers, fishnet, fun = "mode")
return(extract_list)
}
lc_2001_extracts <- lapply(layer_list, fish_extract, fishnet = MSA_fishnet)
